{"ast":null,"code":"import * as __NgCli_bootstrap_1 from \"@angular/platform-browser\";\nimport { enableProdMode } from '@angular/core';\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\nimport { loadTranslations } from \"@angular/localize\";\n\nif (environment.production) {\n  enableProdMode();\n} // Check localstorage for language and load the file\n// console.log('Localstorage locale', localStorage.getItem('locale'));\n//\n// // Bootstrap app\n// platformBrowserDynamic()\n//   .bootstrapModule(AppModule)\n//   .then(ref => {\n//     const localStorageService = ref.injector.get(LocalStorageService);\n//     localStorageService.subscribe(localStorage => {\n//       if (localStorage.theme == \"dark\") {\n//         document.body.classList.add('dark-theme');\n//       }\n//       else {\n//         document.body.classList.remove('dark-theme');\n//       }\n//\n//       // if (localStorage.locale !== 'en') {\n//         fetch('/assets/translations/' + localStorage.locale + '.json')\n//           .then((response) => {\n//             if (!response.ok) {\n//               throw new Error('HTTP error ' + response.status);\n//             }\n//             return response.json();\n//           })\n//           .then((json) => {\n//             // Load translation\n//             loadTranslations(json.translations);\n//             $localize.locale = json.locale;\n//           })\n//           .catch(error => {\n//             console.log(error)\n//           });\n//       // } else { }\n//     })\n//   })\n//   .catch((err) => console.error(err));\n//\n// Check localstorage for language and load the file\n\n\nconsole.log('Localstorage locale', localStorage.getItem('locale'));\nconst locale = localStorage.getItem('locale') || 'en';\nconst theme = localStorage.getItem('theme') || 'light';\nfetch('/assets/translations/' + locale + '.json').then(response => {\n  if (!response.ok) {\n    throw new Error('HTTP error ' + response.status);\n  }\n\n  return response.json();\n}).then(json => {\n  // Load translation\n  loadTranslations(json.translations);\n  $localize.locale = json.locale; // Bootstrap app\n\n  __NgCli_bootstrap_1.platformBrowser().bootstrapModule(AppModule).catch(err => console.error(err));\n}).catch(error => {\n  console.log(error); //Err\n});\n\nif (theme == \"dark\") {\n  document.body.classList.add('dark-theme');\n} else {\n  document.body.classList.remove('dark-theme');\n}","map":{"version":3,"sources":["/Users/valeriuseremet/Projects/OnlineShop/OnlineShop.Web/src/main.ts"],"names":["__NgCli_bootstrap_1","enableProdMode","AppModule","environment","loadTranslations","production","console","log","localStorage","getItem","locale","theme","fetch","then","response","ok","Error","status","json","translations","$localize","platformBrowser","bootstrapModule","catch","err","error","document","body","classList","add","remove"],"mappings":"AAAA,OAAO,KAAKA,mBAAZ,MAAqC,2BAArC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,WAAT,QAA4B,4BAA5B;AACA,SAASC,gBAAT,QAAiC,mBAAjC;;AACA,IAAID,WAAW,CAACE,UAAhB,EAA4B;AACxBJ,EAAAA,cAAc;AACjB,C,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAK,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAnC;AACA,MAAMC,MAAM,GAAGF,YAAY,CAACC,OAAb,CAAqB,QAArB,KAAkC,IAAjD;AACA,MAAME,KAAK,GAAGH,YAAY,CAACC,OAAb,CAAqB,OAArB,KAAiC,OAA/C;AACAG,KAAK,CAAC,0BAA0BF,MAA1B,GAAmC,OAApC,CAAL,CACKG,IADL,CACWC,QAAD,IAAc;AACpB,MAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AACd,UAAM,IAAIC,KAAJ,CAAU,gBAAgBF,QAAQ,CAACG,MAAnC,CAAN;AACH;;AACD,SAAOH,QAAQ,CAACI,IAAT,EAAP;AACH,CAND,EAOKL,IAPL,CAOWK,IAAD,IAAU;AAChB;AACAd,EAAAA,gBAAgB,CAACc,IAAI,CAACC,YAAN,CAAhB;AACAC,EAAAA,SAAS,CAACV,MAAV,GAAmBQ,IAAI,CAACR,MAAxB,CAHgB,CAIhB;;AACAV,EAAAA,mBAAmB,CAACqB,eAApB,GACKC,eADL,CACqBpB,SADrB,EAEKqB,KAFL,CAEYC,GAAD,IAASlB,OAAO,CAACmB,KAAR,CAAcD,GAAd,CAFpB;AAGH,CAfD,EAgBKD,KAhBL,CAgBWE,KAAK,IAAI;AAChBnB,EAAAA,OAAO,CAACC,GAAR,CAAYkB,KAAZ,EADgB,CAEhB;AACH,CAnBD;;AAoBA,IAAId,KAAK,IAAI,MAAb,EAAqB;AACjBe,EAAAA,QAAQ,CAACC,IAAT,CAAcC,SAAd,CAAwBC,GAAxB,CAA4B,YAA5B;AACH,CAFD,MAGK;AACDH,EAAAA,QAAQ,CAACC,IAAT,CAAcC,SAAd,CAAwBE,MAAxB,CAA+B,YAA/B;AACH","sourcesContent":["import * as __NgCli_bootstrap_1 from \"@angular/platform-browser\";\nimport { enableProdMode } from '@angular/core';\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\nimport { loadTranslations } from \"@angular/localize\";\nif (environment.production) {\n    enableProdMode();\n}\n// Check localstorage for language and load the file\n// console.log('Localstorage locale', localStorage.getItem('locale'));\n//\n// // Bootstrap app\n// platformBrowserDynamic()\n//   .bootstrapModule(AppModule)\n//   .then(ref => {\n//     const localStorageService = ref.injector.get(LocalStorageService);\n//     localStorageService.subscribe(localStorage => {\n//       if (localStorage.theme == \"dark\") {\n//         document.body.classList.add('dark-theme');\n//       }\n//       else {\n//         document.body.classList.remove('dark-theme');\n//       }\n//\n//       // if (localStorage.locale !== 'en') {\n//         fetch('/assets/translations/' + localStorage.locale + '.json')\n//           .then((response) => {\n//             if (!response.ok) {\n//               throw new Error('HTTP error ' + response.status);\n//             }\n//             return response.json();\n//           })\n//           .then((json) => {\n//             // Load translation\n//             loadTranslations(json.translations);\n//             $localize.locale = json.locale;\n//           })\n//           .catch(error => {\n//             console.log(error)\n//           });\n//       // } else { }\n//     })\n//   })\n//   .catch((err) => console.error(err));\n//\n// Check localstorage for language and load the file\nconsole.log('Localstorage locale', localStorage.getItem('locale'));\nconst locale = localStorage.getItem('locale') || 'en';\nconst theme = localStorage.getItem('theme') || 'light';\nfetch('/assets/translations/' + locale + '.json')\n    .then((response) => {\n    if (!response.ok) {\n        throw new Error('HTTP error ' + response.status);\n    }\n    return response.json();\n})\n    .then((json) => {\n    // Load translation\n    loadTranslations(json.translations);\n    $localize.locale = json.locale;\n    // Bootstrap app\n    __NgCli_bootstrap_1.platformBrowser()\n        .bootstrapModule(AppModule)\n        .catch((err) => console.error(err));\n})\n    .catch(error => {\n    console.log(error);\n    //Err\n});\nif (theme == \"dark\") {\n    document.body.classList.add('dark-theme');\n}\nelse {\n    document.body.classList.remove('dark-theme');\n}\n"]},"metadata":{},"sourceType":"module"}