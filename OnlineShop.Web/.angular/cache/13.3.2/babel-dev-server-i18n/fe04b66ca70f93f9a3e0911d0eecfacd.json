{"ast":null,"code":"import * as __NgCli_bootstrap_1 from \"@angular/platform-browser\";\nimport { enableProdMode } from '@angular/core';\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\nimport { loadTranslations } from \"@angular/localize\";\nimport { LocalStorageService } from \"./app/services/local-storage.service\";\n\nif (environment.production) {\n  enableProdMode();\n} // Check localstorage for language and load the file\n\n\nconsole.log('Localstorage locale', localStorage.getItem('locale')); // Bootstrap app\n\n__NgCli_bootstrap_1.platformBrowser().bootstrapModule(AppModule).then(ref => {\n  const localStorageService = ref.injector.get(LocalStorageService);\n  localStorageService.subscribe(localStorage => {\n    if (localStorage.theme == \"dark\") {\n      document.body.classList.add('dark-theme');\n    } else {\n      document.body.classList.remove('dark-theme');\n    }\n  });\n}).catch(err => console.error(err)); // Check localstorage for language and load the file\n\n\nconsole.log('Localstorage locale', localStorage.getItem('locale'));\nconst locale = localStorage.getItem('locale') || 'en';\nconst theme = localStorage.getItem('theme') || 'light';\nfetch('/assets/translations/' + locale + '.json').then(response => {\n  if (!response.ok) {\n    throw new Error('HTTP error ' + response.status);\n  }\n\n  return response.json();\n}).then(json => {\n  // Load translation\n  loadTranslations(json.translations);\n  $localize.locale = json.locale; // Bootstrap app\n\n  __NgCli_bootstrap_1.platformBrowser().bootstrapModule(AppModule).catch(err => console.error(err));\n}).catch(error => {\n  console.log(error); //Err\n});\n\nif (theme == \"dark\") {\n  document.body.classList.add('dark-theme');\n} else {\n  document.body.classList.remove('dark-theme');\n}","map":{"version":3,"sources":["/Users/valeriuseremet/Projects/OnlineShop/OnlineShop.Web/src/main.ts"],"names":["__NgCli_bootstrap_1","enableProdMode","AppModule","environment","loadTranslations","LocalStorageService","production","console","log","localStorage","getItem","platformBrowser","bootstrapModule","then","ref","localStorageService","injector","get","subscribe","theme","document","body","classList","add","remove","catch","err","error","locale","fetch","response","ok","Error","status","json","translations","$localize"],"mappings":"AAAA,OAAO,KAAKA,mBAAZ,MAAqC,2BAArC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,WAAT,QAA4B,4BAA5B;AACA,SAASC,gBAAT,QAAiC,mBAAjC;AACA,SAASC,mBAAT,QAAoC,sCAApC;;AACA,IAAIF,WAAW,CAACG,UAAhB,EAA4B;AACxBL,EAAAA,cAAc;AACjB,C,CACD;;;AACAM,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAnC,E,CACA;;AACAV,mBAAmB,CAACW,eAApB,GACKC,eADL,CACqBV,SADrB,EAEKW,IAFL,CAEUC,GAAG,IAAI;AACb,QAAMC,mBAAmB,GAAGD,GAAG,CAACE,QAAJ,CAAaC,GAAb,CAAiBZ,mBAAjB,CAA5B;AACAU,EAAAA,mBAAmB,CAACG,SAApB,CAA8BT,YAAY,IAAI;AAC1C,QAAIA,YAAY,CAACU,KAAb,IAAsB,MAA1B,EAAkC;AAC9BC,MAAAA,QAAQ,CAACC,IAAT,CAAcC,SAAd,CAAwBC,GAAxB,CAA4B,YAA5B;AACH,KAFD,MAGK;AACDH,MAAAA,QAAQ,CAACC,IAAT,CAAcC,SAAd,CAAwBE,MAAxB,CAA+B,YAA/B;AACH;AACJ,GAPD;AAQH,CAZD,EAaKC,KAbL,CAaYC,GAAD,IAASnB,OAAO,CAACoB,KAAR,CAAcD,GAAd,CAbpB,E,CAcA;;;AACAnB,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAnC;AACA,MAAMkB,MAAM,GAAGnB,YAAY,CAACC,OAAb,CAAqB,QAArB,KAAkC,IAAjD;AACA,MAAMS,KAAK,GAAGV,YAAY,CAACC,OAAb,CAAqB,OAArB,KAAiC,OAA/C;AACAmB,KAAK,CAAC,0BAA0BD,MAA1B,GAAmC,OAApC,CAAL,CACKf,IADL,CACWiB,QAAD,IAAc;AACpB,MAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AACd,UAAM,IAAIC,KAAJ,CAAU,gBAAgBF,QAAQ,CAACG,MAAnC,CAAN;AACH;;AACD,SAAOH,QAAQ,CAACI,IAAT,EAAP;AACH,CAND,EAOKrB,IAPL,CAOWqB,IAAD,IAAU;AAChB;AACA9B,EAAAA,gBAAgB,CAAC8B,IAAI,CAACC,YAAN,CAAhB;AACAC,EAAAA,SAAS,CAACR,MAAV,GAAmBM,IAAI,CAACN,MAAxB,CAHgB,CAIhB;;AACA5B,EAAAA,mBAAmB,CAACW,eAApB,GACKC,eADL,CACqBV,SADrB,EAEKuB,KAFL,CAEYC,GAAD,IAASnB,OAAO,CAACoB,KAAR,CAAcD,GAAd,CAFpB;AAGH,CAfD,EAgBKD,KAhBL,CAgBWE,KAAK,IAAI;AAChBpB,EAAAA,OAAO,CAACC,GAAR,CAAYmB,KAAZ,EADgB,CAEhB;AACH,CAnBD;;AAoBA,IAAIR,KAAK,IAAI,MAAb,EAAqB;AACjBC,EAAAA,QAAQ,CAACC,IAAT,CAAcC,SAAd,CAAwBC,GAAxB,CAA4B,YAA5B;AACH,CAFD,MAGK;AACDH,EAAAA,QAAQ,CAACC,IAAT,CAAcC,SAAd,CAAwBE,MAAxB,CAA+B,YAA/B;AACH","sourcesContent":["import * as __NgCli_bootstrap_1 from \"@angular/platform-browser\";\nimport { enableProdMode } from '@angular/core';\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\nimport { loadTranslations } from \"@angular/localize\";\nimport { LocalStorageService } from \"./app/services/local-storage.service\";\nif (environment.production) {\n    enableProdMode();\n}\n// Check localstorage for language and load the file\nconsole.log('Localstorage locale', localStorage.getItem('locale'));\n// Bootstrap app\n__NgCli_bootstrap_1.platformBrowser()\n    .bootstrapModule(AppModule)\n    .then(ref => {\n    const localStorageService = ref.injector.get(LocalStorageService);\n    localStorageService.subscribe(localStorage => {\n        if (localStorage.theme == \"dark\") {\n            document.body.classList.add('dark-theme');\n        }\n        else {\n            document.body.classList.remove('dark-theme');\n        }\n    });\n})\n    .catch((err) => console.error(err));\n// Check localstorage for language and load the file\nconsole.log('Localstorage locale', localStorage.getItem('locale'));\nconst locale = localStorage.getItem('locale') || 'en';\nconst theme = localStorage.getItem('theme') || 'light';\nfetch('/assets/translations/' + locale + '.json')\n    .then((response) => {\n    if (!response.ok) {\n        throw new Error('HTTP error ' + response.status);\n    }\n    return response.json();\n})\n    .then((json) => {\n    // Load translation\n    loadTranslations(json.translations);\n    $localize.locale = json.locale;\n    // Bootstrap app\n    __NgCli_bootstrap_1.platformBrowser()\n        .bootstrapModule(AppModule)\n        .catch((err) => console.error(err));\n})\n    .catch(error => {\n    console.log(error);\n    //Err\n});\nif (theme == \"dark\") {\n    document.body.classList.add('dark-theme');\n}\nelse {\n    document.body.classList.remove('dark-theme');\n}\n"]},"metadata":{},"sourceType":"module"}