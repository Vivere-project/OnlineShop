{"ast":null,"code":"import * as __NgCli_bootstrap_1 from \"@angular/platform-browser\";\nimport { enableProdMode } from '@angular/core';\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\nimport { loadTranslations } from \"@angular/localize\";\nimport { LocalStorageService } from \"./app/services/local-storage.service\";\n\nif (environment.production) {\n  enableProdMode();\n} // Check localstorage for language and load the file\n\n\nconsole.log('Localstorage locale', localStorage.getItem('locale')); // Bootstrap app\n\n__NgCli_bootstrap_1.platformBrowser().bootstrapModule(AppModule).then(ref => {\n  const localStorageService = ref.injector.get(LocalStorageService);\n  localStorageService.subscribe(localStorage => {\n    if (localStorage.theme == \"dark\") {\n      document.body.classList.add('dark-theme');\n    } else {\n      document.body.classList.remove('dark-theme');\n    } // if (localStorage.locale !== 'en') {\n\n\n    fetch('/assets/translations/' + localStorage.locale + '.json').then(response => {\n      if (!response.ok) {\n        throw new Error('HTTP error ' + response.status);\n      }\n\n      return response.json();\n    }).then(json => {\n      // Load translation\n      loadTranslations(json.translations);\n      $localize.locale = json.locale;\n    }).catch(error => {\n      console.log(error);\n    }); // } else { }\n  });\n}).catch(err => console.error(err)); // Check localstorage for language and load the file\n\n\nconsole.log('Localstorage locale', localStorage.getItem('locale'));\nconst locale = localStorage.getItem('locale') || 'en';\nconst theme = localStorage.getItem('theme') || 'light';\nfetch('/assets/translations/' + locale + '.json').then(response => {\n  if (!response.ok) {\n    throw new Error('HTTP error ' + response.status);\n  }\n\n  return response.json();\n}).then(json => {\n  // Load translation\n  loadTranslations(json.translations);\n  $localize.locale = json.locale; // Bootstrap app\n\n  __NgCli_bootstrap_1.platformBrowser().bootstrapModule(AppModule).catch(err => console.error(err));\n}).catch(error => {\n  console.log(error); //Err\n});\n\nif (theme == \"dark\") {\n  document.body.classList.add('dark-theme');\n} else {\n  document.body.classList.remove('dark-theme');\n}","map":{"version":3,"sources":["/Users/valeriuseremet/Projects/OnlineShop/OnlineShop.Web/src/main.ts"],"names":["__NgCli_bootstrap_1","enableProdMode","AppModule","environment","loadTranslations","LocalStorageService","production","console","log","localStorage","getItem","platformBrowser","bootstrapModule","then","ref","localStorageService","injector","get","subscribe","theme","document","body","classList","add","remove","fetch","locale","response","ok","Error","status","json","translations","$localize","catch","error","err"],"mappings":"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","sourcesContent":["import * as __NgCli_bootstrap_1 from \"@angular/platform-browser\";\nimport { enableProdMode } from '@angular/core';\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\nimport { loadTranslations } from \"@angular/localize\";\nimport { LocalStorageService } from \"./app/services/local-storage.service\";\nif (environment.production) {\n    enableProdMode();\n}\n// Check localstorage for language and load the file\nconsole.log('Localstorage locale', localStorage.getItem('locale'));\n// Bootstrap app\n__NgCli_bootstrap_1.platformBrowser()\n    .bootstrapModule(AppModule)\n    .then(ref => {\n    const localStorageService = ref.injector.get(LocalStorageService);\n    localStorageService.subscribe(localStorage => {\n        if (localStorage.theme == \"dark\") {\n            document.body.classList.add('dark-theme');\n        }\n        else {\n            document.body.classList.remove('dark-theme');\n        }\n        // if (localStorage.locale !== 'en') {\n        fetch('/assets/translations/' + localStorage.locale + '.json')\n            .then((response) => {\n            if (!response.ok) {\n                throw new Error('HTTP error ' + response.status);\n            }\n            return response.json();\n        })\n            .then((json) => {\n            // Load translation\n            loadTranslations(json.translations);\n            $localize.locale = json.locale;\n        })\n            .catch(error => {\n            console.log(error);\n        });\n        // } else { }\n    });\n})\n    .catch((err) => console.error(err));\n// Check localstorage for language and load the file\nconsole.log('Localstorage locale', localStorage.getItem('locale'));\nconst locale = localStorage.getItem('locale') || 'en';\nconst theme = localStorage.getItem('theme') || 'light';\nfetch('/assets/translations/' + locale + '.json')\n    .then((response) => {\n    if (!response.ok) {\n        throw new Error('HTTP error ' + response.status);\n    }\n    return response.json();\n})\n    .then((json) => {\n    // Load translation\n    loadTranslations(json.translations);\n    $localize.locale = json.locale;\n    // Bootstrap app\n    __NgCli_bootstrap_1.platformBrowser()\n        .bootstrapModule(AppModule)\n        .catch((err) => console.error(err));\n})\n    .catch(error => {\n    console.log(error);\n    //Err\n});\nif (theme == \"dark\") {\n    document.body.classList.add('dark-theme');\n}\nelse {\n    document.body.classList.remove('dark-theme');\n}\n"]},"metadata":{},"sourceType":"module"}